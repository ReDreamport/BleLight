package org.mems;import android.graphics.Color;/** * RGB2HSL red green blue [0~255] * <p/> * hue [0~239] * <p/> * saturation [0~240] luminance.l [0~240] * * @author Kevin.wu */public class ColorTools {    /**     * RGB转HSL     *     * @param red     * @param green     * @param blue     * @param hsl   []     */    public static void RGB2HSL(int red, int green, int blue, int[] hsl) {        float h = 0, s = 0, l = 0;        float r = red / 255.0f;        float g = green / 255.0f;        float b = blue / 255.0f;        float maxVal = Math.max(Math.max(r, g), b);        float minVal = Math.min(Math.min(r, g), b);        float max_add_min = maxVal + minVal;        float max_sub_min = maxVal - minVal;        // hue        if (max_sub_min == 0) {            h = 0; // 无符号        } else if (maxVal == r && g >= b) {            h = 60.0f * (g - b) / max_sub_min;        } else if (maxVal == r && g < b) {            h = 60.0f * (g - b) / max_sub_min + 360.0f;        } else if (maxVal == g) {            h = 60.0f * (b - r) / max_sub_min + 120.0f;        } else if (maxVal == b) {            h = 60.0f * (r - g) / max_sub_min + 240.f;        }        // luminance        l = max_add_min / 2.0f;        // saturation        if (l == 0 || max_sub_min == 0) {            s = 0;        } else if (0 < l || l <= 0.5f) {            s = max_sub_min / max_add_min;        } else if (l > 0.5f) {            s = max_sub_min / (2 - max_add_min);        }        float hueFloat = ((h > 360) ? 360 : ((h < 0) ? 0 : h)) / 360.0f;        float saturationFloat = ((s > 1) ? 1 : ((s < 0) ? 0 : s));        float luminanceFloat = ((l > 1) ? 1 : ((l < 0) ? 0 : l));        // hsl[0] = (int) (239.0f * hueFloat);        // hsl[1] = (int) (240.0f * saturationFloat);        // hsl[2] = (int) (240.0f * luminanceFloat);        hsl[0] = (int) (255.0f * hueFloat);        hsl[1] = (int) (255.0f * saturationFloat);        hsl[2] = (int) (255.0f * luminanceFloat);    }    /**     * HSL转RGB     *     * @param hue     * @param saturation     * @param luminance     * @param rgb     */    public static void HSL2RGB(int hue, int saturation, int luminance, int[] rgb) {        float h = hue / 255.f;        float s = saturation / 255.0f;        float l = luminance / 255.0f;        float r, g, b;        if (saturation == 0) {            r = g = b = l * 255.0f;        } else {            float q = (l < 0.5f) ? (l * (1.0f + s)) : (l + s - (l * s));            float p = (2.0f * l) - q;            float HK = h;            float T[] = new float[3];            T[0] = HK + 0.3333333f;            T[1] = HK;            T[2] = HK - 0.3333333f;            for (int count = 0; count < 3; count++) {                if (T[count] < 0)                    T[count] += 1.0f;                if (T[count] > 1)                    T[count] -= 1.0f;                if ((T[count] * 6 < 1)) {                    T[count] = p + ((q - p) * 6.0f * T[count]);                } else if ((T[count] * 2.0f) < 1) {                    T[count] = q;                } else if (T[count] * 3.0f < 2) {                    T[count] = p + (p - q) * ((2.0f / 3.0f) - T[count]) * 6.0f;                } else {                    T[count] = p;                }            }            r = T[0] * 255.0f;            g = T[1] * 255.0f;            b = T[2] * 255.0f;        }        rgb[0] = (int) ((r > 255) ? 255 : ((r < 0) ? 0 : r));        rgb[1] = (int) ((g > 255) ? 255 : ((g < 0) ? 0 : g));        rgb[2] = (int) ((b > 255) ? 255 : ((b < 0) ? 0 : b));    }    /**     * 调整亮度值后 hsl2Color     */    public static int restoreColor(int light, int red, int green, int blue) {        int lightValue = light * 255 / 100;        int colorArray[] = new int[3];        colorArray[0] = red;        colorArray[1] = green;        colorArray[2] = blue;        int hsl[] = new int[3];        ColorTools.RGB2HSL(colorArray[0], colorArray[1], colorArray[2], hsl);        int rgb[] = new int[3];        ColorTools.HSL2RGB(hsl[0], hsl[1], lightValue, rgb);        return Color.rgb(rgb[0], rgb[1], rgb[2]);    }}